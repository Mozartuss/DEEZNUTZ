# Festlegen des Standard Loglevels
.level= INFO

# Der ConsoleHandler gibt die Nachrichten auf std.err aus
#handlers= java.util.logging.ConsoleHandler

# Alternativ können weitere Handler hinzugenommen werden. Hier z.B. der Filehandler
handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# Die Nachrichten in eine Datei im Benutzerverzeichnis schreiben
java.util.logging.FileHandler.pattern = %h/java%u.log
# Die Nachrichten in eine Datei im Projektverzeichnis schreiben
#java.util.logging.FileHandler.pattern = java%u.log
java.util.logging.FileHandler.limit = 100000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Zusätzlich zu den normalen Logleveln kann für jeden Handler noch ein eigener Filter
# vergeben werden. Das ist nützlich wenn beispielsweise alle Nachrichten in das Logfile geschrieben werden sollen
# aber nur ab INFO in der Console ausgegeben werden sollen.
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

############################################################
# Extraeinstellungen für einzelne Logger
############################################################

# Für einzelne Logger kann ein eigenes Loglevel festgelegt werden.
#de.hsa.games.deeznutz.level = FINEST
#de.hsa.games.core.level = SEVERE




# Logger Level:
# OFF    : nothing will be logged
# SEVERE : kritischer Fehler, der dazu führt, dass das Programm nicht ordnungsgemäß fortgesetzt werden kann, eventuell Programmabbruch
# WARNING: es ist ein Fehler aufgetreten (gecatchte Fehler)
# INFO   : Wichtige Information ( Start game, Quit game ...)
# CONFIG : Ausgabe von Information über eine Konfiguration (Welche BotFactory wurde gewählt)
# FINE   : Ausgabe von wichtigen Schritten im Programmfluss
# FINER  : detailliertere Ausgabe als FINE
# FINEST : detailliertere Ausgabe als FINER (zum Beispiel Start und Ende einer Methode)
# ALL    : Alle Obengenante level werden in einer Date gespeichert oder ausgegeben.
